basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Address:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      is_default:
        type: boolean
      main_address:
        type: string
      name:
        type: string
      sub_address:
        type: string
      tel:
        type: string
      updatedAt:
        type: string
      user_id:
        type: string
    type: object
  models.Cart:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      product_id:
        type: string
      updatedAt:
        type: string
      user_id:
        type: string
      value:
        type: integer
    type: object
  models.CreateAddressRequest:
    properties:
      is_default:
        type: boolean
      main_address:
        type: string
      name:
        type: string
      sub_address:
        type: string
      tel:
        type: string
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      f_name:
        type: string
      l_name:
        type: string
      password:
        type: string
      tel:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.ResetPasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    type: object
  models.Review:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: string
      product_id:
        type: string
      score:
        type: integer
      updatedAt:
        type: string
      user_id:
        type: string
    type: object
  models.Tracking:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      payment:
        type: string
      product_id:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      user_id:
        type: string
    type: object
  models.UpdateInfoRequest:
    properties:
      email:
        type: string
      f_name:
        type: string
      l_name:
        type: string
      tel:
        type: string
    type: object
  models.User:
    properties:
      address:
        items:
          $ref: '#/definitions/models.Address'
        type: array
      carts:
        items:
          $ref: '#/definitions/models.Cart'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      f_name:
        type: string
      id:
        type: string
      l_name:
        type: string
      password:
        type: string
      reviews:
        items:
          $ref: '#/definitions/models.Review'
        type: array
      tel:
        type: string
      trackings:
        items:
          $ref: '#/definitions/models.Tracking'
        type: array
      updatedAt:
        type: string
    type: object
host: localhost:1323/api
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Alpaca Mall
  version: "1.0"
paths:
  /address/create:
    post:
      consumes:
      - application/json
      description: Create address
      parameters:
      - description: Address object
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/models.CreateAddressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Address'
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      tags:
      - Address
  /address/default:
    get:
      consumes:
      - application/json
      description: Get default address
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Address'
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      tags:
      - Address
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Token
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      tags:
      - Auth
  /auth/test:
    get:
      consumes:
      - application/json
      description: Test jwt auth
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      tags:
      - Auth
  /user/create:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      tags:
      - User
  /user/info:
    get:
      consumes:
      - application/json
      description: Get user by ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      tags:
      - User
  /user/reset-password:
    put:
      consumes:
      - application/json
      description: Reset password
      parameters:
      - description: Reset Password object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      tags:
      - User
  /user/update-info:
    put:
      consumes:
      - application/json
      description: Update user info
      parameters:
      - description: Update info object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
